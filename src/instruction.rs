use crate::{opcode, types};

#[derive(Copy, Clone, PartialEq)]
pub enum BlockType {
    Void,
    ResolvingTo(types::ValueType),
    Functional(u32),
}

unsafe impl bytemuck::NoUninit for BlockType {}
unsafe impl bytemuck::Zeroable for BlockType {}

#[derive(Copy, Clone, PartialEq)]
pub struct BlockHeader {
    pub ty: BlockType,
    pub length: u32,
}

unsafe impl bytemuck::Zeroable for BlockHeader {}
unsafe impl bytemuck::AnyBitPattern for BlockHeader {}
unsafe impl bytemuck::NoUninit for BlockHeader {}

unsafe impl bytemuck::NoUninit for Instruction {}

#[derive(Copy, Clone, PartialEq, Eq)]
pub enum Instruction {
    Unreachable              = opcode::Main::Unreachable as isize,
    Nop                      = opcode::Main::Nop as isize,
    Block                    = opcode::Main::Block as isize,
    Loop                     = opcode::Main::Loop as isize,
    If                       = opcode::Main::If as isize,
    Else                     = opcode::Main::Else as isize,
    Br                       = opcode::Main::Br as isize,
    BrIf                     = opcode::Main::BrIf as isize,
    Return                   = opcode::Main::Return as isize,
    BrTable                  = opcode::Main::BrTable as isize,
    Call                     = opcode::Main::Call as isize,
    CallIndirect             = opcode::Main::CallIndirect as isize,
    Drop                     = opcode::Main::Drop as isize,
    Select                   = opcode::Main::Select as isize,
    SelectTyped              = opcode::Main::SelectTyped as isize,
    LocalGet                 = opcode::Main::LocalGet as isize,
    LocalSet                 = opcode::Main::LocalSet as isize,
    LocalTee                 = opcode::Main::LocalTee as isize,
    GlobalGet                = opcode::Main::GlobalGet as isize,
    GlobalSet                = opcode::Main::GlobalSet as isize,
    TableGet                 = opcode::Main::TableGet as isize,
    TableSet                 = opcode::Main::TableSet as isize,
    I32Load                  = opcode::Main::I32Load as isize,
    I64Load                  = opcode::Main::I64Load as isize,
    F32Load                  = opcode::Main::F32Load as isize,
    F64Load                  = opcode::Main::F64Load as isize,
    I32Load8S                = opcode::Main::I32Load8S as isize,
    I32Load8U                = opcode::Main::I32Load8U as isize,
    I32Load16S               = opcode::Main::I32Load16S as isize,
    I32Load16U               = opcode::Main::I32Load16U as isize,
    I64Load8S                = opcode::Main::I64Load8S as isize,
    I64Load8U                = opcode::Main::I64Load8U as isize,
    I64Load16S               = opcode::Main::I64Load16S as isize,
    I64Load16U               = opcode::Main::I64Load16U as isize,
    I64Load32S               = opcode::Main::I64Load32S as isize,
    I64Load32U               = opcode::Main::I64Load32U as isize,
    I32Store                 = opcode::Main::I32Store as isize,
    I64Store                 = opcode::Main::I64Store as isize,
    F32Store                 = opcode::Main::F32Store as isize,
    F64Store                 = opcode::Main::F64Store as isize,
    I32Store8                = opcode::Main::I32Store8 as isize,
    I32Store16               = opcode::Main::I32Store16 as isize,
    I64Store8                = opcode::Main::I64Store8 as isize,
    I64Store16               = opcode::Main::I64Store16 as isize,
    I64Store32               = opcode::Main::I64Store32 as isize,
    MemorySize               = opcode::Main::MemorySize as isize,
    MemoryGrow               = opcode::Main::MemoryGrow as isize,
    I32Const                 = opcode::Main::I32Const as isize,
    I64Const                 = opcode::Main::I64Const as isize,
    F32Const                 = opcode::Main::F32Const as isize,
    F64Const                 = opcode::Main::F64Const as isize,
    I32Eqz                   = opcode::Main::I32Eqz as isize,
    I32Eq                    = opcode::Main::I32Eq as isize,
    I32Ne                    = opcode::Main::I32Ne as isize,
    I32LtS                   = opcode::Main::I32LtS as isize,
    I32LtU                   = opcode::Main::I32LtU as isize,
    I32GtS                   = opcode::Main::I32GtS as isize,
    I32GtU                   = opcode::Main::I32GtU as isize,
    I32LeS                   = opcode::Main::I32LeS as isize,
    I32LeU                   = opcode::Main::I32LeU as isize,
    I32GeS                   = opcode::Main::I32GeS as isize,
    I32GeU                   = opcode::Main::I32GeU as isize,
    I64Eqz                   = opcode::Main::I64Eqz as isize,
    I64Eq                    = opcode::Main::I64Eq as isize,
    I64Ne                    = opcode::Main::I64Ne as isize,
    I64LtS                   = opcode::Main::I64LtS as isize,
    I64LtU                   = opcode::Main::I64LtU as isize,
    I64GtS                   = opcode::Main::I64GtS as isize,
    I64GtU                   = opcode::Main::I64GtU as isize,
    I64LeS                   = opcode::Main::I64LeS as isize,
    I64LeU                   = opcode::Main::I64LeU as isize,
    I64GeS                   = opcode::Main::I64GeS as isize,
    I64GeU                   = opcode::Main::I64GeU as isize,
    F32Eq                    = opcode::Main::F32Eq as isize,
    F32Ne                    = opcode::Main::F32Ne as isize,
    F32Lt                    = opcode::Main::F32Lt as isize,
    F32Gt                    = opcode::Main::F32Gt as isize,
    F32Le                    = opcode::Main::F32Le as isize,
    F32Ge                    = opcode::Main::F32Ge as isize,
    F64Eq                    = opcode::Main::F64Eq as isize,
    F64Ne                    = opcode::Main::F64Ne as isize,
    F64Lt                    = opcode::Main::F64Lt as isize,
    F64Gt                    = opcode::Main::F64Gt as isize,
    F64Le                    = opcode::Main::F64Le as isize,
    F64Ge                    = opcode::Main::F64Ge as isize,
    I32Clz                   = opcode::Main::I32Clz as isize,
    I32Ctz                   = opcode::Main::I32Ctz as isize,
    I32Popcnt                = opcode::Main::I32Popcnt as isize,
    I32Add                   = opcode::Main::I32Add as isize,
    I32Sub                   = opcode::Main::I32Sub as isize,
    I32Mul                   = opcode::Main::I32Mul as isize,
    I32DivS                  = opcode::Main::I32DivS as isize,
    I32DivU                  = opcode::Main::I32DivU as isize,
    I32RemS                  = opcode::Main::I32RemS as isize,
    I32RemU                  = opcode::Main::I32RemU as isize,
    I32And                   = opcode::Main::I32And as isize,
    I32Or                    = opcode::Main::I32Or as isize,
    I32Xor                   = opcode::Main::I32Xor as isize,
    I32Shl                   = opcode::Main::I32Shl as isize,
    I32ShrS                  = opcode::Main::I32ShrS as isize,
    I32ShrU                  = opcode::Main::I32ShrU as isize,
    I32Rotl                  = opcode::Main::I32Rotl as isize,
    I32Rotr                  = opcode::Main::I32Rotr as isize,
    I64Clz                   = opcode::Main::I64Clz as isize,
    I64Ctz                   = opcode::Main::I64Ctz as isize,
    I64Popcnt                = opcode::Main::I64Popcnt as isize,
    I64Add                   = opcode::Main::I64Add as isize,
    I64Sub                   = opcode::Main::I64Sub as isize,
    I64Mul                   = opcode::Main::I64Mul as isize,
    I64DivS                  = opcode::Main::I64DivS as isize,
    I64DivU                  = opcode::Main::I64DivU as isize,
    I64RemS                  = opcode::Main::I64RemS as isize,
    I64RemU                  = opcode::Main::I64RemU as isize,
    I64And                   = opcode::Main::I64And as isize,
    I64Or                    = opcode::Main::I64Or as isize,
    I64Xor                   = opcode::Main::I64Xor as isize,
    I64Shl                   = opcode::Main::I64Shl as isize,
    I64ShrS                  = opcode::Main::I64ShrS as isize,
    I64ShrU                  = opcode::Main::I64ShrU as isize,
    I64Rotl                  = opcode::Main::I64Rotl as isize,
    I64Rotr                  = opcode::Main::I64Rotr as isize,
    F32Abs                   = opcode::Main::F32Abs as isize,
    F32Neg                   = opcode::Main::F32Neg as isize,
    F32Ceil                  = opcode::Main::F32Ceil as isize,
    F32Floor                 = opcode::Main::F32Floor as isize,
    F32Trunc                 = opcode::Main::F32Trunc as isize,
    F32Nearest               = opcode::Main::F32Nearest as isize,
    F32Sqrt                  = opcode::Main::F32Sqrt as isize,
    F32Add                   = opcode::Main::F32Add as isize,
    F32Sub                   = opcode::Main::F32Sub as isize,
    F32Mul                   = opcode::Main::F32Mul as isize,
    F32Div                   = opcode::Main::F32Div as isize,
    F32Min                   = opcode::Main::F32Min as isize,
    F32Max                   = opcode::Main::F32Max as isize,
    F32CopySign              = opcode::Main::F32CopySign as isize,
    F64Abs                   = opcode::Main::F64Abs as isize,
    F64Neg                   = opcode::Main::F64Neg as isize,
    F64Ceil                  = opcode::Main::F64Ceil as isize,
    F64Floor                 = opcode::Main::F64Floor as isize,
    F64Trunc                 = opcode::Main::F64Trunc as isize,
    F64Nearest               = opcode::Main::F64Nearest as isize,
    F64Sqrt                  = opcode::Main::F64Sqrt as isize,
    F64Add                   = opcode::Main::F64Add as isize,
    F64Sub                   = opcode::Main::F64Sub as isize,
    F64Mul                   = opcode::Main::F64Mul as isize,
    F64Div                   = opcode::Main::F64Div as isize,
    F64Min                   = opcode::Main::F64Min as isize,
    F64Max                   = opcode::Main::F64Max as isize,
    F64CopySign              = opcode::Main::F64CopySign as isize,
    I32WrapI64               = opcode::Main::I32WrapI64 as isize,
    I32TruncF32S             = opcode::Main::I32TruncF32S as isize,
    I32TruncF32U             = opcode::Main::I32TruncF32U as isize,
    I32TruncF64S             = opcode::Main::I32TruncF64S as isize,
    I32TruncF64U             = opcode::Main::I32TruncF64U as isize,
    I64ExtendI32S            = opcode::Main::I64ExtendI32S as isize,
    I64ExtendI32U            = opcode::Main::I64ExtendI32U as isize,
    I64TruncF32S             = opcode::Main::I64TruncF32S as isize,
    I64TruncF32U             = opcode::Main::I64TruncF32U as isize,
    I64TruncF64S             = opcode::Main::I64TruncF64S as isize,
    I64TruncF64U             = opcode::Main::I64TruncF64U as isize,
    F32ConvertI32S           = opcode::Main::F32ConvertI32S as isize,
    F32ConvertI32U           = opcode::Main::F32ConvertI32U as isize,
    F32ConvertI64S           = opcode::Main::F32ConvertI64S as isize,
    F32ConvertI64U           = opcode::Main::F32ConvertI64U as isize,
    F32DemoteF64             = opcode::Main::F32DemoteF64 as isize,
    F64ConvertI32S           = opcode::Main::F64ConvertI32S as isize,
    F64ConvertI32U           = opcode::Main::F64ConvertI32U as isize,
    F64ConvertI64S           = opcode::Main::F64ConvertI64S as isize,
    F64ConvertI64U           = opcode::Main::F64ConvertI64U as isize,
    F64PromoteF32            = opcode::Main::F64PromoteF32 as isize,
    I32ReinterpretF32        = opcode::Main::I32ReinterpretF32 as isize,
    I64ReinterpretF64        = opcode::Main::I64ReinterpretF64 as isize,
    F32ReinterpretI32        = opcode::Main::F32ReinterpretI32 as isize,
    F64ReinterpretI64        = opcode::Main::F64ReinterpretI64 as isize,
    I32Extend8S              = opcode::Main::I32Extend8S as isize,
    I32Extend16S             = opcode::Main::I32Extend16S as isize,
    I64Extend8S              = opcode::Main::I64Extend8S as isize,
    I64Extend16S             = opcode::Main::I64Extend16S as isize,
    I64Extend32S             = opcode::Main::I64Extend32S as isize,
    RefNull                  = opcode::Main::RefNull as isize,
    RefIsNull                = opcode::Main::RefIsNull as isize,
    RefFunc                  = opcode::Main::RefFunc as isize,
    System                   = opcode::Main::System as isize,
    Vector                   = opcode::Main::Vector as isize,
}

impl TryFrom<u8> for Instruction {
    type Error = ();

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        opcode::Main::try_from(value).map(|v| unsafe { std::mem::transmute::<opcode::Main, Instruction>(v) })
    }
}

impl TryFrom<opcode::Main> for Instruction {
    type Error = ();

    fn try_from(value: opcode::Main) -> Result<Self, Self::Error> {
        match value {
            opcode::Main::Unreachable          => Ok(Instruction::Unreachable),
            opcode::Main::Nop                  => Ok(Instruction::Nop),
            opcode::Main::Block                => Ok(Instruction::Block),
            opcode::Main::Loop                 => Ok(Instruction::Loop),
            opcode::Main::If                   => Ok(Instruction::If),
            opcode::Main::Else                 => Ok(Instruction::Else),
            opcode::Main::Br                   => Ok(Instruction::Br),
            opcode::Main::BrIf                 => Ok(Instruction::BrIf),
            opcode::Main::Return               => Ok(Instruction::Return),
            opcode::Main::BrTable              => Ok(Instruction::BrTable),
            opcode::Main::Call                 => Ok(Instruction::Call),
            opcode::Main::CallIndirect         => Ok(Instruction::CallIndirect),
            opcode::Main::Drop                 => Ok(Instruction::Drop),
            opcode::Main::Select               => Ok(Instruction::Select),
            opcode::Main::SelectTyped          => Ok(Instruction::SelectTyped),
            opcode::Main::LocalGet             => Ok(Instruction::LocalGet),
            opcode::Main::LocalSet             => Ok(Instruction::LocalSet),
            opcode::Main::LocalTee             => Ok(Instruction::LocalTee),
            opcode::Main::GlobalGet            => Ok(Instruction::GlobalGet),
            opcode::Main::GlobalSet            => Ok(Instruction::GlobalSet),
            opcode::Main::TableGet             => Ok(Instruction::TableGet),
            opcode::Main::TableSet             => Ok(Instruction::TableSet),
            opcode::Main::I32Load              => Ok(Instruction::I32Load),
            opcode::Main::I64Load              => Ok(Instruction::I64Load),
            opcode::Main::F32Load              => Ok(Instruction::F32Load),
            opcode::Main::F64Load              => Ok(Instruction::F64Load),
            opcode::Main::I32Load8S            => Ok(Instruction::I32Load8S),
            opcode::Main::I32Load8U            => Ok(Instruction::I32Load8U),
            opcode::Main::I32Load16S           => Ok(Instruction::I32Load16S),
            opcode::Main::I32Load16U           => Ok(Instruction::I32Load16U),
            opcode::Main::I64Load8S            => Ok(Instruction::I64Load8S),
            opcode::Main::I64Load8U            => Ok(Instruction::I64Load8U),
            opcode::Main::I64Load16S           => Ok(Instruction::I64Load16S),
            opcode::Main::I64Load16U           => Ok(Instruction::I64Load16U),
            opcode::Main::I64Load32S           => Ok(Instruction::I64Load32S),
            opcode::Main::I64Load32U           => Ok(Instruction::I64Load32U),
            opcode::Main::I32Store             => Ok(Instruction::I32Store),
            opcode::Main::I64Store             => Ok(Instruction::I64Store),
            opcode::Main::F32Store             => Ok(Instruction::F32Store),
            opcode::Main::F64Store             => Ok(Instruction::F64Store),
            opcode::Main::I32Store8            => Ok(Instruction::I32Store8),
            opcode::Main::I32Store16           => Ok(Instruction::I32Store16),
            opcode::Main::I64Store8            => Ok(Instruction::I64Store8),
            opcode::Main::I64Store16           => Ok(Instruction::I64Store16),
            opcode::Main::I64Store32           => Ok(Instruction::I64Store32),
            opcode::Main::MemorySize           => Ok(Instruction::MemorySize),
            opcode::Main::MemoryGrow           => Ok(Instruction::MemoryGrow),
            opcode::Main::I32Const             => Ok(Instruction::I32Const),
            opcode::Main::I64Const             => Ok(Instruction::I64Const),
            opcode::Main::F32Const             => Ok(Instruction::F32Const),
            opcode::Main::F64Const             => Ok(Instruction::F64Const),
            opcode::Main::I32Eqz               => Ok(Instruction::I32Eqz),
            opcode::Main::I32Eq                => Ok(Instruction::I32Eq),
            opcode::Main::I32Ne                => Ok(Instruction::I32Ne),
            opcode::Main::I32LtS               => Ok(Instruction::I32LtS),
            opcode::Main::I32LtU               => Ok(Instruction::I32LtU),
            opcode::Main::I32GtS               => Ok(Instruction::I32GtS),
            opcode::Main::I32GtU               => Ok(Instruction::I32GtU),
            opcode::Main::I32LeS               => Ok(Instruction::I32LeS),
            opcode::Main::I32LeU               => Ok(Instruction::I32LeU),
            opcode::Main::I32GeS               => Ok(Instruction::I32GeS),
            opcode::Main::I32GeU               => Ok(Instruction::I32GeU),
            opcode::Main::I64Eqz               => Ok(Instruction::I64Eqz),
            opcode::Main::I64Eq                => Ok(Instruction::I64Eq),
            opcode::Main::I64Ne                => Ok(Instruction::I64Ne),
            opcode::Main::I64LtS               => Ok(Instruction::I64LtS),
            opcode::Main::I64LtU               => Ok(Instruction::I64LtU),
            opcode::Main::I64GtS               => Ok(Instruction::I64GtS),
            opcode::Main::I64GtU               => Ok(Instruction::I64GtU),
            opcode::Main::I64LeS               => Ok(Instruction::I64LeS),
            opcode::Main::I64LeU               => Ok(Instruction::I64LeU),
            opcode::Main::I64GeS               => Ok(Instruction::I64GeS),
            opcode::Main::I64GeU               => Ok(Instruction::I64GeU),
            opcode::Main::F32Eq                => Ok(Instruction::F32Eq),
            opcode::Main::F32Ne                => Ok(Instruction::F32Ne),
            opcode::Main::F32Lt                => Ok(Instruction::F32Lt),
            opcode::Main::F32Gt                => Ok(Instruction::F32Gt),
            opcode::Main::F32Le                => Ok(Instruction::F32Le),
            opcode::Main::F32Ge                => Ok(Instruction::F32Ge),
            opcode::Main::F64Eq                => Ok(Instruction::F64Eq),
            opcode::Main::F64Ne                => Ok(Instruction::F64Ne),
            opcode::Main::F64Lt                => Ok(Instruction::F64Lt),
            opcode::Main::F64Gt                => Ok(Instruction::F64Gt),
            opcode::Main::F64Le                => Ok(Instruction::F64Le),
            opcode::Main::F64Ge                => Ok(Instruction::F64Ge),
            opcode::Main::I32Clz               => Ok(Instruction::I32Clz),
            opcode::Main::I32Ctz               => Ok(Instruction::I32Ctz),
            opcode::Main::I32Popcnt            => Ok(Instruction::I32Popcnt),
            opcode::Main::I32Add               => Ok(Instruction::I32Add),
            opcode::Main::I32Sub               => Ok(Instruction::I32Sub),
            opcode::Main::I32Mul               => Ok(Instruction::I32Mul),
            opcode::Main::I32DivS              => Ok(Instruction::I32DivS),
            opcode::Main::I32DivU              => Ok(Instruction::I32DivU),
            opcode::Main::I32RemS              => Ok(Instruction::I32RemS),
            opcode::Main::I32RemU              => Ok(Instruction::I32RemU),
            opcode::Main::I32And               => Ok(Instruction::I32And),
            opcode::Main::I32Or                => Ok(Instruction::I32Or),
            opcode::Main::I32Xor               => Ok(Instruction::I32Xor),
            opcode::Main::I32Shl               => Ok(Instruction::I32Shl),
            opcode::Main::I32ShrS              => Ok(Instruction::I32ShrS),
            opcode::Main::I32ShrU              => Ok(Instruction::I32ShrU),
            opcode::Main::I32Rotl              => Ok(Instruction::I32Rotl),
            opcode::Main::I32Rotr              => Ok(Instruction::I32Rotr),
            opcode::Main::I64Clz               => Ok(Instruction::I64Clz),
            opcode::Main::I64Ctz               => Ok(Instruction::I64Ctz),
            opcode::Main::I64Popcnt            => Ok(Instruction::I64Popcnt),
            opcode::Main::I64Add               => Ok(Instruction::I64Add),
            opcode::Main::I64Sub               => Ok(Instruction::I64Sub),
            opcode::Main::I64Mul               => Ok(Instruction::I64Mul),
            opcode::Main::I64DivS              => Ok(Instruction::I64DivS),
            opcode::Main::I64DivU              => Ok(Instruction::I64DivU),
            opcode::Main::I64RemS              => Ok(Instruction::I64RemS),
            opcode::Main::I64RemU              => Ok(Instruction::I64RemU),
            opcode::Main::I64And               => Ok(Instruction::I64And),
            opcode::Main::I64Or                => Ok(Instruction::I64Or),
            opcode::Main::I64Xor               => Ok(Instruction::I64Xor),
            opcode::Main::I64Shl               => Ok(Instruction::I64Shl),
            opcode::Main::I64ShrS              => Ok(Instruction::I64ShrS),
            opcode::Main::I64ShrU              => Ok(Instruction::I64ShrU),
            opcode::Main::I64Rotl              => Ok(Instruction::I64Rotl),
            opcode::Main::I64Rotr              => Ok(Instruction::I64Rotr),
            opcode::Main::F32Abs               => Ok(Instruction::F32Abs),
            opcode::Main::F32Neg               => Ok(Instruction::F32Neg),
            opcode::Main::F32Ceil              => Ok(Instruction::F32Ceil),
            opcode::Main::F32Floor             => Ok(Instruction::F32Floor),
            opcode::Main::F32Trunc             => Ok(Instruction::F32Trunc),
            opcode::Main::F32Nearest           => Ok(Instruction::F32Nearest),
            opcode::Main::F32Sqrt              => Ok(Instruction::F32Sqrt),
            opcode::Main::F32Add               => Ok(Instruction::F32Add),
            opcode::Main::F32Sub               => Ok(Instruction::F32Sub),
            opcode::Main::F32Mul               => Ok(Instruction::F32Mul),
            opcode::Main::F32Div               => Ok(Instruction::F32Div),
            opcode::Main::F32Min               => Ok(Instruction::F32Min),
            opcode::Main::F32Max               => Ok(Instruction::F32Max),
            opcode::Main::F32CopySign          => Ok(Instruction::F32CopySign),
            opcode::Main::F64Abs               => Ok(Instruction::F64Abs),
            opcode::Main::F64Neg               => Ok(Instruction::F64Neg),
            opcode::Main::F64Ceil              => Ok(Instruction::F64Ceil),
            opcode::Main::F64Floor             => Ok(Instruction::F64Floor),
            opcode::Main::F64Trunc             => Ok(Instruction::F64Trunc),
            opcode::Main::F64Nearest           => Ok(Instruction::F64Nearest),
            opcode::Main::F64Sqrt              => Ok(Instruction::F64Sqrt),
            opcode::Main::F64Add               => Ok(Instruction::F64Add),
            opcode::Main::F64Sub               => Ok(Instruction::F64Sub),
            opcode::Main::F64Mul               => Ok(Instruction::F64Mul),
            opcode::Main::F64Div               => Ok(Instruction::F64Div),
            opcode::Main::F64Min               => Ok(Instruction::F64Min),
            opcode::Main::F64Max               => Ok(Instruction::F64Max),
            opcode::Main::F64CopySign          => Ok(Instruction::F64CopySign),
            opcode::Main::I32WrapI64           => Ok(Instruction::I32WrapI64),
            opcode::Main::I32TruncF32S         => Ok(Instruction::I32TruncF32S),
            opcode::Main::I32TruncF32U         => Ok(Instruction::I32TruncF32U),
            opcode::Main::I32TruncF64S         => Ok(Instruction::I32TruncF64S),
            opcode::Main::I32TruncF64U         => Ok(Instruction::I32TruncF64U),
            opcode::Main::I64ExtendI32S        => Ok(Instruction::I64ExtendI32S),
            opcode::Main::I64ExtendI32U        => Ok(Instruction::I64ExtendI32U),
            opcode::Main::I64TruncF32S         => Ok(Instruction::I64TruncF32S),
            opcode::Main::I64TruncF32U         => Ok(Instruction::I64TruncF32U),
            opcode::Main::I64TruncF64S         => Ok(Instruction::I64TruncF64S),
            opcode::Main::I64TruncF64U         => Ok(Instruction::I64TruncF64U),
            opcode::Main::F32ConvertI32S       => Ok(Instruction::F32ConvertI32S),
            opcode::Main::F32ConvertI32U       => Ok(Instruction::F32ConvertI32U),
            opcode::Main::F32ConvertI64S       => Ok(Instruction::F32ConvertI64S),
            opcode::Main::F32ConvertI64U       => Ok(Instruction::F32ConvertI64U),
            opcode::Main::F32DemoteF64         => Ok(Instruction::F32DemoteF64),
            opcode::Main::F64ConvertI32S       => Ok(Instruction::F64ConvertI32S),
            opcode::Main::F64ConvertI32U       => Ok(Instruction::F64ConvertI32U),
            opcode::Main::F64ConvertI64S       => Ok(Instruction::F64ConvertI64S),
            opcode::Main::F64ConvertI64U       => Ok(Instruction::F64ConvertI64U),
            opcode::Main::F64PromoteF32        => Ok(Instruction::F64PromoteF32),
            opcode::Main::I32ReinterpretF32    => Ok(Instruction::I32ReinterpretF32),
            opcode::Main::I64ReinterpretF64    => Ok(Instruction::I64ReinterpretF64),
            opcode::Main::F32ReinterpretI32    => Ok(Instruction::F32ReinterpretI32),
            opcode::Main::F64ReinterpretI64    => Ok(Instruction::F64ReinterpretI64),
            opcode::Main::I32Extend8S          => Ok(Instruction::I32Extend8S),
            opcode::Main::I32Extend16S         => Ok(Instruction::I32Extend16S),
            opcode::Main::I64Extend8S          => Ok(Instruction::I64Extend8S),
            opcode::Main::I64Extend16S         => Ok(Instruction::I64Extend16S),
            opcode::Main::I64Extend32S         => Ok(Instruction::I64Extend32S),
            opcode::Main::RefNull              => Ok(Instruction::RefNull),
            opcode::Main::RefIsNull            => Ok(Instruction::RefIsNull),
            opcode::Main::RefFunc              => Ok(Instruction::RefFunc),
            opcode::Main::System               => Ok(Instruction::System),
            opcode::Main::Vector               => Ok(Instruction::Vector),
            _ => Err(()),
        }
    }
}