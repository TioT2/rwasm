use crate::{opcode, types};

#[derive(Copy, Clone, PartialEq)]
pub enum BlockType {
    Void,
    ResolvingTo(types::ValueType),
    Functional(u32),
}

unsafe impl bytemuck::NoUninit for BlockType {}
unsafe impl bytemuck::Zeroable for BlockType {}

#[derive(Copy, Clone, PartialEq)]
pub struct BlockHeader {
    pub ty: BlockType,
    pub length: u32,
}

unsafe impl bytemuck::Zeroable for BlockHeader {}
unsafe impl bytemuck::AnyBitPattern for BlockHeader {}
unsafe impl bytemuck::NoUninit for BlockHeader {}

unsafe impl bytemuck::NoUninit for Instruction {}

#[derive(Copy, Clone, PartialEq, Eq)]
pub enum Instruction {
    Nop,
    Block,
    Loop,
    If,
    Else,
    Br,
    BrIf,
    Return,
    BrTable,
    Call,
    CallIndirect,
    Drop,
    Select,
    SelectTyped,
    LocalGet,
    LocalSet,
    LocalTee,
    GlobalGet,
    GlobalSet,
    TableGet,
    TableSet,
    I32Load,
    I64Load,
    F32Load,
    F64Load,
    I32Load8S,
    I32Load8U,
    I32Load16S,
    I32Load16U,
    I64Load8S,
    I64Load8U,
    I64Load16S,
    I64Load16U,
    I64Load32S,
    I64Load32U,
    I32Store,
    I64Store,
    F32Store,
    F64Store,
    I32Store8,
    I32Store16,
    I64Store8,
    I64Store16,
    I64Store32,
    MemorySize,
    MemoryGrow,
    I32Const,
    I64Const,
    F32Const,
    F64Const,
    I32Eqz,
    I32Eq,
    I32Ne,
    I32LtS,
    I32LtU,
    I32GtS,
    I32GtU,
    I32LeS,
    I32LeU,
    I32GeS,
    I32GeU,
    I64Eqz,
    I64Eq,
    I64Ne,
    I64LtS,
    I64LtU,
    I64GtS,
    I64GtU,
    I64LeS,
    I64LeU,
    I64GeS,
    I64GeU,
    F32Eq,
    F32Ne,
    F32Lt,
    F32Gt,
    F32Le,
    F32Ge,
    F64Eq,
    F64Ne,
    F64Lt,
    F64Gt,
    F64Le,
    F64Ge,
    I32Clz,
    I32Ctz,
    I32Popcnt,
    I32Add,
    I32Sub,
    I32Mul,
    I32DivS,
    I32DivU,
    I32RemS,
    I32RemU,
    I32And,
    I32Or,
    I32Xor,
    I32Shl,
    I32ShrS,
    I32ShrU,
    I32Rotl,
    I32Rotr,
    I64Clz,
    I64Ctz,
    I64Popcnt,
    I64Add,
    I64Sub,
    I64Mul,
    I64DivS,
    I64DivU,
    I64RemS,
    I64RemU,
    I64And,
    I64Or,
    I64Xor,
    I64Shl,
    I64ShrS,
    I64ShrU,
    I64Rotl,
    I64Rotr,
    F32Abs,
    F32Neg,
    F32Ceil,
    F32Floor,
    F32Trunc,
    F32Nearest,
    F32Sqrt,
    F32Add,
    F32Sub,
    F32Mul,
    F32Div,
    F32Min,
    F32Max,
    F32CopySign,
    F64Abs,
    F64Neg,
    F64Ceil,
    F64Floor,
    F64Trunc,
    F64Nearest,
    F64Sqrt,
    F64Add,
    F64Sub,
    F64Mul,
    F64Div,
    F64Min,
    F64Max,
    F64CopySign,
    I32WrapI64,
    I32TruncF32S,
    I32TruncF32U,
    I32TruncF64S,
    I32TruncF64U,
    I64ExtendI32S,
    I64ExtendI32U,
    I64TruncF32S,
    I64TruncF32U,
    I64TruncF64S,
    I64TruncF64U,
    F32ConvertI32S,
    F32ConvertI32U,
    F32ConvertI64S,
    F32ConvertI64U,
    F32DemoteF64,
    F64ConvertI32S,
    F64ConvertI32U,
    F64ConvertI64S,
    F64ConvertI64U,
    F64PromoteF32,
    I32ReinterpretF32,
    I64ReinterpretF64,
    F32ReinterpretI32,
    F64ReinterpretI64,
    I32Extend8S,
    I32Extend16S,
    I64Extend8S,
    I64Extend16S,
    I64Extend32S,
    RefNull,
    RefIsNull,
    RefFunc,
    System,
    Vector,
    Unreachable,
}

impl TryFrom<u8> for Instruction {
    type Error = ();

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        if value <= Instruction::Unreachable as u8 {
            Ok(unsafe { std::mem::transmute::<u8, Instruction>(value) })
        } else {
            Err(())
        }
    }
}

impl TryFrom<opcode::Main> for Instruction {
    type Error = ();

    fn try_from(value: opcode::Main) -> Result<Self, Self::Error> {
        match value {
            opcode::Main::Unreachable          => Ok(Instruction::Unreachable),
            opcode::Main::Nop                  => Ok(Instruction::Nop),
            opcode::Main::Block                => Ok(Instruction::Block),
            opcode::Main::Loop                 => Ok(Instruction::Loop),
            opcode::Main::If                   => Ok(Instruction::If),
            opcode::Main::Else                 => Ok(Instruction::Else),
            opcode::Main::Br                   => Ok(Instruction::Br),
            opcode::Main::BrIf                 => Ok(Instruction::BrIf),
            opcode::Main::Return               => Ok(Instruction::Return),
            opcode::Main::BrTable              => Ok(Instruction::BrTable),
            opcode::Main::Call                 => Ok(Instruction::Call),
            opcode::Main::CallIndirect         => Ok(Instruction::CallIndirect),
            opcode::Main::Drop                 => Ok(Instruction::Drop),
            opcode::Main::Select               => Ok(Instruction::Select),
            opcode::Main::SelectTyped          => Ok(Instruction::SelectTyped),
            opcode::Main::LocalGet             => Ok(Instruction::LocalGet),
            opcode::Main::LocalSet             => Ok(Instruction::LocalSet),
            opcode::Main::LocalTee             => Ok(Instruction::LocalTee),
            opcode::Main::GlobalGet            => Ok(Instruction::GlobalGet),
            opcode::Main::GlobalSet            => Ok(Instruction::GlobalSet),
            opcode::Main::TableGet             => Ok(Instruction::TableGet),
            opcode::Main::TableSet             => Ok(Instruction::TableSet),
            opcode::Main::I32Load              => Ok(Instruction::I32Load),
            opcode::Main::I64Load              => Ok(Instruction::I64Load),
            opcode::Main::F32Load              => Ok(Instruction::F32Load),
            opcode::Main::F64Load              => Ok(Instruction::F64Load),
            opcode::Main::I32Load8S            => Ok(Instruction::I32Load8S),
            opcode::Main::I32Load8U            => Ok(Instruction::I32Load8U),
            opcode::Main::I32Load16S           => Ok(Instruction::I32Load16S),
            opcode::Main::I32Load16U           => Ok(Instruction::I32Load16U),
            opcode::Main::I64Load8S            => Ok(Instruction::I64Load8S),
            opcode::Main::I64Load8U            => Ok(Instruction::I64Load8U),
            opcode::Main::I64Load16S           => Ok(Instruction::I64Load16S),
            opcode::Main::I64Load16U           => Ok(Instruction::I64Load16U),
            opcode::Main::I64Load32S           => Ok(Instruction::I64Load32S),
            opcode::Main::I64Load32U           => Ok(Instruction::I64Load32U),
            opcode::Main::I32Store             => Ok(Instruction::I32Store),
            opcode::Main::I64Store             => Ok(Instruction::I64Store),
            opcode::Main::F32Store             => Ok(Instruction::F32Store),
            opcode::Main::F64Store             => Ok(Instruction::F64Store),
            opcode::Main::I32Store8            => Ok(Instruction::I32Store8),
            opcode::Main::I32Store16           => Ok(Instruction::I32Store16),
            opcode::Main::I64Store8            => Ok(Instruction::I64Store8),
            opcode::Main::I64Store16           => Ok(Instruction::I64Store16),
            opcode::Main::I64Store32           => Ok(Instruction::I64Store32),
            opcode::Main::MemorySize           => Ok(Instruction::MemorySize),
            opcode::Main::MemoryGrow           => Ok(Instruction::MemoryGrow),
            opcode::Main::I32Const             => Ok(Instruction::I32Const),
            opcode::Main::I64Const             => Ok(Instruction::I64Const),
            opcode::Main::F32Const             => Ok(Instruction::F32Const),
            opcode::Main::F64Const             => Ok(Instruction::F64Const),
            opcode::Main::I32Eqz               => Ok(Instruction::I32Eqz),
            opcode::Main::I32Eq                => Ok(Instruction::I32Eq),
            opcode::Main::I32Ne                => Ok(Instruction::I32Ne),
            opcode::Main::I32LtS               => Ok(Instruction::I32LtS),
            opcode::Main::I32LtU               => Ok(Instruction::I32LtU),
            opcode::Main::I32GtS               => Ok(Instruction::I32GtS),
            opcode::Main::I32GtU               => Ok(Instruction::I32GtU),
            opcode::Main::I32LeS               => Ok(Instruction::I32LeS),
            opcode::Main::I32LeU               => Ok(Instruction::I32LeU),
            opcode::Main::I32GeS               => Ok(Instruction::I32GeS),
            opcode::Main::I32GeU               => Ok(Instruction::I32GeU),
            opcode::Main::I64Eqz               => Ok(Instruction::I64Eqz),
            opcode::Main::I64Eq                => Ok(Instruction::I64Eq),
            opcode::Main::I64Ne                => Ok(Instruction::I64Ne),
            opcode::Main::I64LtS               => Ok(Instruction::I64LtS),
            opcode::Main::I64LtU               => Ok(Instruction::I64LtU),
            opcode::Main::I64GtS               => Ok(Instruction::I64GtS),
            opcode::Main::I64GtU               => Ok(Instruction::I64GtU),
            opcode::Main::I64LeS               => Ok(Instruction::I64LeS),
            opcode::Main::I64LeU               => Ok(Instruction::I64LeU),
            opcode::Main::I64GeS               => Ok(Instruction::I64GeS),
            opcode::Main::I64GeU               => Ok(Instruction::I64GeU),
            opcode::Main::F32Eq                => Ok(Instruction::F32Eq),
            opcode::Main::F32Ne                => Ok(Instruction::F32Ne),
            opcode::Main::F32Lt                => Ok(Instruction::F32Lt),
            opcode::Main::F32Gt                => Ok(Instruction::F32Gt),
            opcode::Main::F32Le                => Ok(Instruction::F32Le),
            opcode::Main::F32Ge                => Ok(Instruction::F32Ge),
            opcode::Main::F64Eq                => Ok(Instruction::F64Eq),
            opcode::Main::F64Ne                => Ok(Instruction::F64Ne),
            opcode::Main::F64Lt                => Ok(Instruction::F64Lt),
            opcode::Main::F64Gt                => Ok(Instruction::F64Gt),
            opcode::Main::F64Le                => Ok(Instruction::F64Le),
            opcode::Main::F64Ge                => Ok(Instruction::F64Ge),
            opcode::Main::I32Clz               => Ok(Instruction::I32Clz),
            opcode::Main::I32Ctz               => Ok(Instruction::I32Ctz),
            opcode::Main::I32Popcnt            => Ok(Instruction::I32Popcnt),
            opcode::Main::I32Add               => Ok(Instruction::I32Add),
            opcode::Main::I32Sub               => Ok(Instruction::I32Sub),
            opcode::Main::I32Mul               => Ok(Instruction::I32Mul),
            opcode::Main::I32DivS              => Ok(Instruction::I32DivS),
            opcode::Main::I32DivU              => Ok(Instruction::I32DivU),
            opcode::Main::I32RemS              => Ok(Instruction::I32RemS),
            opcode::Main::I32RemU              => Ok(Instruction::I32RemU),
            opcode::Main::I32And               => Ok(Instruction::I32And),
            opcode::Main::I32Or                => Ok(Instruction::I32Or),
            opcode::Main::I32Xor               => Ok(Instruction::I32Xor),
            opcode::Main::I32Shl               => Ok(Instruction::I32Shl),
            opcode::Main::I32ShrS              => Ok(Instruction::I32ShrS),
            opcode::Main::I32ShrU              => Ok(Instruction::I32ShrU),
            opcode::Main::I32Rotl              => Ok(Instruction::I32Rotl),
            opcode::Main::I32Rotr              => Ok(Instruction::I32Rotr),
            opcode::Main::I64Clz               => Ok(Instruction::I64Clz),
            opcode::Main::I64Ctz               => Ok(Instruction::I64Ctz),
            opcode::Main::I64Popcnt            => Ok(Instruction::I64Popcnt),
            opcode::Main::I64Add               => Ok(Instruction::I64Add),
            opcode::Main::I64Sub               => Ok(Instruction::I64Sub),
            opcode::Main::I64Mul               => Ok(Instruction::I64Mul),
            opcode::Main::I64DivS              => Ok(Instruction::I64DivS),
            opcode::Main::I64DivU              => Ok(Instruction::I64DivU),
            opcode::Main::I64RemS              => Ok(Instruction::I64RemS),
            opcode::Main::I64RemU              => Ok(Instruction::I64RemU),
            opcode::Main::I64And               => Ok(Instruction::I64And),
            opcode::Main::I64Or                => Ok(Instruction::I64Or),
            opcode::Main::I64Xor               => Ok(Instruction::I64Xor),
            opcode::Main::I64Shl               => Ok(Instruction::I64Shl),
            opcode::Main::I64ShrS              => Ok(Instruction::I64ShrS),
            opcode::Main::I64ShrU              => Ok(Instruction::I64ShrU),
            opcode::Main::I64Rotl              => Ok(Instruction::I64Rotl),
            opcode::Main::I64Rotr              => Ok(Instruction::I64Rotr),
            opcode::Main::F32Abs               => Ok(Instruction::F32Abs),
            opcode::Main::F32Neg               => Ok(Instruction::F32Neg),
            opcode::Main::F32Ceil              => Ok(Instruction::F32Ceil),
            opcode::Main::F32Floor             => Ok(Instruction::F32Floor),
            opcode::Main::F32Trunc             => Ok(Instruction::F32Trunc),
            opcode::Main::F32Nearest           => Ok(Instruction::F32Nearest),
            opcode::Main::F32Sqrt              => Ok(Instruction::F32Sqrt),
            opcode::Main::F32Add               => Ok(Instruction::F32Add),
            opcode::Main::F32Sub               => Ok(Instruction::F32Sub),
            opcode::Main::F32Mul               => Ok(Instruction::F32Mul),
            opcode::Main::F32Div               => Ok(Instruction::F32Div),
            opcode::Main::F32Min               => Ok(Instruction::F32Min),
            opcode::Main::F32Max               => Ok(Instruction::F32Max),
            opcode::Main::F32CopySign          => Ok(Instruction::F32CopySign),
            opcode::Main::F64Abs               => Ok(Instruction::F64Abs),
            opcode::Main::F64Neg               => Ok(Instruction::F64Neg),
            opcode::Main::F64Ceil              => Ok(Instruction::F64Ceil),
            opcode::Main::F64Floor             => Ok(Instruction::F64Floor),
            opcode::Main::F64Trunc             => Ok(Instruction::F64Trunc),
            opcode::Main::F64Nearest           => Ok(Instruction::F64Nearest),
            opcode::Main::F64Sqrt              => Ok(Instruction::F64Sqrt),
            opcode::Main::F64Add               => Ok(Instruction::F64Add),
            opcode::Main::F64Sub               => Ok(Instruction::F64Sub),
            opcode::Main::F64Mul               => Ok(Instruction::F64Mul),
            opcode::Main::F64Div               => Ok(Instruction::F64Div),
            opcode::Main::F64Min               => Ok(Instruction::F64Min),
            opcode::Main::F64Max               => Ok(Instruction::F64Max),
            opcode::Main::F64CopySign          => Ok(Instruction::F64CopySign),
            opcode::Main::I32WrapI64           => Ok(Instruction::I32WrapI64),
            opcode::Main::I32TruncF32S         => Ok(Instruction::I32TruncF32S),
            opcode::Main::I32TruncF32U         => Ok(Instruction::I32TruncF32U),
            opcode::Main::I32TruncF64S         => Ok(Instruction::I32TruncF64S),
            opcode::Main::I32TruncF64U         => Ok(Instruction::I32TruncF64U),
            opcode::Main::I64ExtendI32S        => Ok(Instruction::I64ExtendI32S),
            opcode::Main::I64ExtendI32U        => Ok(Instruction::I64ExtendI32U),
            opcode::Main::I64TruncF32S         => Ok(Instruction::I64TruncF32S),
            opcode::Main::I64TruncF32U         => Ok(Instruction::I64TruncF32U),
            opcode::Main::I64TruncF64S         => Ok(Instruction::I64TruncF64S),
            opcode::Main::I64TruncF64U         => Ok(Instruction::I64TruncF64U),
            opcode::Main::F32ConvertI32S       => Ok(Instruction::F32ConvertI32S),
            opcode::Main::F32ConvertI32U       => Ok(Instruction::F32ConvertI32U),
            opcode::Main::F32ConvertI64S       => Ok(Instruction::F32ConvertI64S),
            opcode::Main::F32ConvertI64U       => Ok(Instruction::F32ConvertI64U),
            opcode::Main::F32DemoteF64         => Ok(Instruction::F32DemoteF64),
            opcode::Main::F64ConvertI32S       => Ok(Instruction::F64ConvertI32S),
            opcode::Main::F64ConvertI32U       => Ok(Instruction::F64ConvertI32U),
            opcode::Main::F64ConvertI64S       => Ok(Instruction::F64ConvertI64S),
            opcode::Main::F64ConvertI64U       => Ok(Instruction::F64ConvertI64U),
            opcode::Main::F64PromoteF32        => Ok(Instruction::F64PromoteF32),
            opcode::Main::I32ReinterpretF32    => Ok(Instruction::I32ReinterpretF32),
            opcode::Main::I64ReinterpretF64    => Ok(Instruction::I64ReinterpretF64),
            opcode::Main::F32ReinterpretI32    => Ok(Instruction::F32ReinterpretI32),
            opcode::Main::F64ReinterpretI64    => Ok(Instruction::F64ReinterpretI64),
            opcode::Main::I32Extend8S          => Ok(Instruction::I32Extend8S),
            opcode::Main::I32Extend16S         => Ok(Instruction::I32Extend16S),
            opcode::Main::I64Extend8S          => Ok(Instruction::I64Extend8S),
            opcode::Main::I64Extend16S         => Ok(Instruction::I64Extend16S),
            opcode::Main::I64Extend32S         => Ok(Instruction::I64Extend32S),
            opcode::Main::RefNull              => Ok(Instruction::RefNull),
            opcode::Main::RefIsNull            => Ok(Instruction::RefIsNull),
            opcode::Main::RefFunc              => Ok(Instruction::RefFunc),
            opcode::Main::System               => Ok(Instruction::System),
            opcode::Main::Vector               => Ok(Instruction::Vector),
            _ => Err(()),
        }
    }
}